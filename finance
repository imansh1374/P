import math
import yfinance as yf
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler 
import matplotlib.pyplot as plt
import tensorflow as tf
import datetime as dt
from datetime import datetime
from tensorflow import keras
from tensorflow.keras import layers
from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, TensorBoard

#stock_data = yf.download('^KS11', start='2006-01-01', end='2008-12-30')
#stock_data = yf.download('^GSPC', start='2006-01-01', end='2008-12-30')
#stock_data = yf.download('^DJI', start='2006-01-01', end='2008-12-30')
stock_data = yf.download('^IXIC', start='2006-01-01', end='2008-12-30')
# stock_data1= yf.download('^IXIC', start='2005-12-30', end='2008-12-30')

stock_data.head()

#plt.figure(figsize=(15, 8))
#plt.title('Stock Prices History')
#plt.plot(stock_data['Close'])
#plt.xlabel('Date')
#plt.ylabel('Prices ($)')
cols = list(stock_data)[1:6]
#datelist_train = [dt.datetime.strptime(date, '%Y-%m-%d').date() for date in datelist_train]

close_prices = stock_data['Close']
close_prices1 = stock_data1['Close']
open_prices = stock_data['Open']
high_prices = stock_data['High']
low_prices = stock_data['Low']

DHTC = (np.array(high_prices) - np.array(close_prices)) / np.array(close_prices) 
DOTC=  ((open_prices) - (close_prices)) / (close_prices)
DLTC= ((low_prices) - (close_prices)) / (close_prices)
OCTC = ((close_prices) - (close_prices1)) / (close_prices1)



#values = DHTC.values
training_data_len = math.ceil(len(DHTC)* 0.8)

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(DHTC.reshape(-1,1))
train_data = scaled_data[0: training_data_len, :]



x_train = []
y_train = []

for i in range(10, len(train_data)):
    x_train.append(train_data[i-10:i, 0])
    y_train.append(train_data[i, 0])
    
x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))


test_data = scaled_data[training_data_len-10: , : ]
x_test = []
y_test = values[training_data_len:]

for i in range(10, len(test_data)):
  x_test.append(test_data[i-10:i, 0])

x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

model = keras.Sequential()
model.add(layers.LSTM(100, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(layers.LSTM(100, return_sequences=False))
model.add(layers.Dense(25))
model.add(layers.Dense(1))
model.summary()


model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, batch_size= 1, epochs=1)

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)
rmse = np.sqrt(np.mean(predictions - y_test)**2)
rmse
