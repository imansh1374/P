import math
import pandas as pd
import numpy as np
import yfinance as yf
import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from tensorflow import keras
from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, TensorBoard
pd.options.mode.chained_assignment = None

# define the target and features

target = ['Close']
features = ['DHTC','DOTC' ,'DLTC','OCTC','OOTC']

# download the data
df = yf.download('^GSPC', start='2006-01-02', end='2008-12-30')
df1= yf.download('^GSPC', start='2006-01-01', end='2008-12-30')
#df = df[features + target]
close_prices = df['Close']
close_prices1= df1['Close']
open_prices = df['Open']
high_prices = df['High']
low_prices = df['Low']
DHTC = ((high_prices) -(close_prices)) / (close_prices) 
DOTC=  ((open_prices) - (close_prices)) / (close_prices)
DLTC= ((low_prices) - (close_prices)) / (close_prices)
OCTC = ((close_prices) - (close_prices1)) / (close_prices1)
OOTC = ((open_prices) - (close_prices1)) / (close_prices1)

d = {
    "DHTC": pd.Series(DHTC),
    "DOTC": pd.Series(DOTC),
    "DLTC": pd.Series(DLTC),
     "OCTC": pd.Series(OCTC),
    "OOTC": pd.Series(OOTC),
     "Close": pd.Series(close_prices)
}
df = pd.DataFrame(d)
#features = [S,A ,T]
# split the data
split = int(df.shape[0] * 2 / 3)
df_train = df.iloc[:split, :].copy()
df_test = df.iloc[split:, :].copy()

# scale the data
target_scaler = MinMaxScaler().fit(df_train[target])
df_train[target] = target_scaler.transform(df_train[target])
df_test[target] = target_scaler.transform(df_test[target])

features_scaler = MinMaxScaler().fit(df_train[features])
df_train[features] = features_scaler.transform(df_train[features])
df_test[features] = features_scaler.transform(df_test[features])

# extract the input sequences and output values
sequence_length = 30

X_train, y_train = [], []

for i in range(sequence_length, df_train.shape[0]):
    X_train.append(df_train[features + target].iloc[i - sequence_length: i])
    y_train.append(df_train[target].iloc[i])

X_train, y_train = np.array(X_train), np.array(y_train)

X_test, y_test = [], []

for i in range(sequence_length, df_test.shape[0]):
    X_test.append(df_test[features + target].iloc[i - sequence_length: i])
    y_test.append(df_test[target].iloc[i])

X_test, y_test = np.array(X_test), np.array(y_test)

print(X_train.shape)
# (138, 30, 4)

print(X_test.shape)
# (55, 30, 4)

# build and train the model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=X_train.shape[1:]))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=50))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, epochs=5, batch_size=32)

model.evaluate(X_test, y_test)

# generate the test set predictions
y_pred = model.predict(X_test)
y_pred = target_scaler.inverse_transform(y_pred)

# plot the test set predictions
df['Predicted Close'] = np.nan
df['Predicted Close'].iloc[- y_pred.shape[0]:] = y_pred.flatten()
df[['Close', 'Predicted Close']].plot()
