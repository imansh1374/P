import time
import numpy as np
import scipy as sp
import pandas as pd
import yfinance as yf
import seaborn as sns
import statistics
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.model_selection import learning_curve
from sklearn.model_selection import validation_curve
from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LogisticRegression


#Getting Data / t = train
sp500t = yf.download("^GSPC", start="2006-01-01", end="2007-12-30") 
sp500 = yf.download("^GSPC", start="2008-01-01", end="2008-12-30")
kospit = yf.download("^KS11", start="2006-01-01", end="2007-12-30")
kospi = yf.download("^KS11", start="2008-01-01", end="2008-12-30")
jonest = yf.download("^DJI", start="2006-01-01", end="2007-12-30")
jones = yf.download("^DJI", start="2008-01-01", end="2008-12-30")
nasdaqt = yf.download("^IXIC", start="2006-01-01", end="2007-12-30")
nasdaq = yf.download("^IXIC", start="2008-01-01", end="2008-12-30")

#Scaling Formula

def normal_scaling(df): #data_normalization
    
    df_norm = df.copy()
    
    for column in df_norm.columns:
        df_norm[column] = (df_norm[column] - df_norm[column].statistics.mean()) / (df_norm[column] - df_norm[column].stdev())
        
    return df_norm

 #def min_max_scaling(df):
    
  #  df_norm = df.copy()
    
    #for column in df_norm.columns:
    #    df_norm[column] = (df_norm[column] - df_norm[column].min()) / (df_norm[column].max() - df_norm[column].min())
        
 #   return df_norm   
   
 


#scaler = MinMaxScaler()
scaler = StandardScaler()

#Print and scaling in Fromula

df_norm = pd.DataFrame(scaler.fit_transform(kospit), columns=kospit.columns)
kospint = np.where(df_norm<0, 0, df_norm) #convert negative numbers to zero
print("Kospi Train =" , kospint)
del(df_norm)
df_norm = pd.DataFrame(scaler.fit_transform(sp500t), columns=kospit.columns)
sp500nt = np.where(df_norm<0, 0, df_norm)#convert negative numbers to zero
print("SP500 Train = ", sp500nt)
del(df_norm)
df_norm = pd.DataFrame(scaler.fit_transform(jonest), columns=kospit.columns)
jonesnt = np.where(df_norm<0, 0, df_norm)#convert negative numbers to zero
print("Jones Train = ", jonesnt) 
del(df_norm)
df_norm = pd.DataFrame(scaler.fit_transform(nasdaqt), columns=kospit.columns)
nasdaqnt = np.where(df_norm<0, 0, df_norm)#convert negative numbers to zero
print("NASDAQ Train = ", nasdaqnt) 


df_norm = pd.DataFrame(scaler.fit_transform(kospi), columns=kospit.columns)
kospin = np.where(df_norm<0, 0, df_norm)#convert negative numbers to zero
print("Kospi Test =" , kospin)
del(df_norm)
df_norm = pd.DataFrame(scaler.fit_transform(sp500), columns=kospit.columns)
sp500n = np.where(df_norm<0, 0, df_norm)#convert negative numbers to zero
print("SP500 Test = ", sp500n)
del(df_norm)
df_norm = pd.DataFrame(scaler.fit_transform(jones), columns=kospit.columns)
jonesn = np.where(df_norm<0, 0, df_norm)#convert negative numbers to zero
print("Jones Test = ", jonesn) 
del(df_norm)
df_norm = pd.DataFrame(scaler.fit_transform(nasdaq), columns=kospit.columns)
nasdaqn = np.where(df_norm<0, 0, df_norm)#convert negative numbers to zero
print("NASDAQ Test = ", nasdaqn) 


#Kospin
openk = [row[1] for row in kospin.T]
highk = [row[2] for row in kospin.T]
lowk = [row[3] for row in kospin.T]
closek = [row[4] for row in kospin.T]

#SP500
opens = [row[1] for row in sp500n.T]
highs = [row[2] for row in sp500n.T]
lows = [row[3] for row in sp500n.T]
closes = [row[4] for row in sp500n.T]

#jones
openj = [row[1] for row in jonesn.T]
highj = [row[2] for row in jonesn.T]
lowj = [row[3] for row in jonesn.T]
closej = [row[4] for row in jonesn.T]

#NASDAQ
openn = [row[1] for row in nasdaqn.T]
highn = [row[2] for row in nasdaqn.T]
lown = [row[3] for row in nasdaqn.T]
closen = [row[4] for row in nasdaqn.T]


#Feature Extraction
#vectorizer = CountVectorizer()
#vectorizer
#vectorizer.fit_transform(kospit)
#X= vectorizer.get_feature_names_out()
#print(X)
#Plotting
plt.plot(kospit, label = "kospi")
plt.plot(sp500t, label = "sp500")
plt.plot(jonest, label = "jones")
plt.plot(nasdaqt, label = "Nasdaq")

plt.xlabel('Date')
plt.ylabel('Normalized Price')

DHTC=(np.array(highk) -np.array(closek))/np.array(closek)      #Daytime, High-to-Close Return
#DOTC=      #Daytime, Open-to-Close Return
#DLTC=      #Daytime, Low-to-Close Return
#OCTC=      #Overnight, Close-to-Close Return
#OOTC=      #Overnight, Open-to-Close Return
